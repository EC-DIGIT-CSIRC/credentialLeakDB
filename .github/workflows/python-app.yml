# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: flak8 and pytest

on:
  push:
    branches: [ main, develop, re-write-modules, release/* ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      PORT: 8080
      DBHOST: localhost
      DBUSER: credentialleakdb
      DBPASSWORD: 1234testForUnitTesting
      DBNAME: credentialleakdb
      VIPLIST: tests/fixtures/vips.txt
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: set up demo database
      run: |
        sudo apt install postgresql-12 
        sudo -u postgres pg_ctlcluster 12 main start
        sudo service postgresql start
        # sudo -u postgres pg_ctlcluster 12 main start
        sudo -u postgres createdb credentialleakdb
        sudo -u postgres createuser -s $DBUSER
        sudo -u postgres psql $DBNAME < db.sql
        sudo -u postgres psql -c "ALTER role $DBUSER WITH PASSWORD '$DBPASSWORD'"
    - name: prepare environment and mocking
      run: |
        cp config.SAMPLE.py api/config.py
        echo "PORT=$PORT" > ENV
        echo "DBHOST=$DBHOST" >> ENV
        echo "DBUSER=$DBUSER" >> ENV
        echo "DBPASSWORD=$DBPASSWORD" >> ENV
        echo "DBNAME=$DBNAME" >> ENV
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --ignore=E251 --show-source --statistics --exclude venv
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --ignore=E251 --statistics --exclude venv
    - name: Start the RESTful API server
      run: |
        uvicorn --host 127.0.0.1 --port 8080 --reload api.main:app &
        # uvicorn --env-file ENV --host 127.0.0.1 --port 8080 --reload api.main:app &
    
    - name: Test with pytest
      run: |
        python -m pytest -vv --cov=./ --cov-report=term --cov-report=xml tests/

    - name: Validate coverage report exists
      run: |
        ls -lha

    - name: Snyk Security Scan
      uses: snyk/actions/python@master
      # continue-on-errormsg: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        # https://support.snyk.io/hc/en-us/articles/360003812578-Our-full-CLI-reference
        # args: --command=pipenv run --severity-threshold=high --fail-on=all --file=*req*.txt --dev --org=digits2 --debug
        args: --command=python --severity-threshold=high --fail-on=all --file=requirements.txt --package-manager=pip --dev --org=digits2 --debug -skip-unresolved

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

