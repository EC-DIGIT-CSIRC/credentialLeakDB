# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Codecov
    # You may pin to the exact commit or the version.
    # uses: codecov/codecov-action@fcebab03f26c7530a22baa63f06b3e0515f0c7cd
    uses: codecov/codecov-action@v1.3.1
    with:
      # Repository upload token - get it from codecov.io. Required only for private repositories
      token: # optional
      # Comma-separated list of files to upload
      files: # optional
      # Directory to search for coverage reports.
      directory: # optional
      # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
      flags: # optional
      # Extra curl arguments to communicate with AWS.
      aws_curl_args: # optional
      # Extra curl arguments to communicate with Codecov. e.g., -U "--proxy http://http-proxy"
      codecov_curl_args: # optional
      # The commit SHA of the parent for which you are uploading coverage. If not present, the parent will be determined using the API of your repository provider.  When using the repository providers API, the parent is determined via finding the closest ancestor to the commit.
      commit_parent: # optional
      # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
      env_vars: # optional
      # Specify whether or not CI build should fail if Codecov runs into an error during upload
      fail_ci_if_error: # optional
      # Path to coverage file to upload
      file: # optional
      # Comma-separated list, see the README for options and their usage
      functionalities: # optional
      # extra arguments to pass to gcov
      gcov_args: # optional
      # gcov executable to run. Defaults to gcov
      gcov_executable: # optional
      # Paths to ignore during gcov gathering (as a glob)
      gcov_path_exclude: # optional
      # Paths to include during gcov gathering (as a glob)
      gcov_path_include: # optional
      # Prefix filepaths to help resolve path fixing
      gcov_prefix: # optional
      # Project root directory, also used when preparing gcov
      gcov_root_dir: # optional
      # Move discovered coverage reports to the trash
      move_coverage_to_trash: # optional
      # User defined upload name. Visible in Codecov UI
      name: # optional
      # Specify the branch name
      override_branch: # optional
      # Specify the build number
      override_build: # optional
      # Specify the commit SHA
      override_commit: # optional
      # Specify the pull request number
      override_pr: # optional
      # Specify the git tag
      override_tag: # optional
      # Used to restrict the set of git/hg files that can be matched with filenames in the coverage report. This is useful for monorepos or other setups where a full filepath may not be specified in the coverage report, and that shortened filepath may appear multiple times in a directory structure (e.g. __init__.py)
      network_filter: # optional
      # Write upload file to path before uploading
      path_to_write_report: # optional
      # Used when not in git/hg project to identify project root directory
      root_dir: # optional
      # Specify whether the Codecov output should be verbose
      verbose: # optional
      # Directory in which to execute codecov.sh
      working-directory: # optional
      # Custom Derived Data Path for Coverage.profdata and gcov processing
      xcode_derived_data: # optional
      # Specify packages to build coverage. Uploader will only build these packages
      xcode_package: # optional
